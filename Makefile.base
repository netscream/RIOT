ifeq (, $(__RIOTBUILD_FLAG))
    $(error You cannot build a module on its own. Use "make" in your application's directory instead.)
endif

unexport DIRS
DIRS := $(sort $(abspath ${DIRS}))

MODULE ?= $(shell basename $(CURDIR))

.PHONY: all ${DIRS:%=ALL--%} ${DIRS:%=CLEAN--%}

ifneq (mcs51,$(TOOLCHAIN))
all: $(BINDIR)$(MODULE).a ..nothing
else
all: $(TARGET_MCS51) $(BINDIR)$(MODULE).rel ..nothing
endif

..nothing:
	@:

clean:: ${DIRS:%=CLEAN--%}

${DIRS:%=ALL--%}:
	"$(MAKE)" -C ${@:ALL--%=%}

${DIRS:%=CLEAN--%}:
	"$(MAKE)" -C ${@:CLEAN--%=%} clean

ifeq ($(strip $(SRC)),)
    SRC := $(filter-out $(SRC_NOLTO), $(wildcard *.c))
endif
ifeq ($(strip $(SRCXX)),)
    SRCXX := $(wildcard *.cpp)
endif
ifeq ($(strip $(ASMSRC)),)
    ASMSRC := $(wildcard *.s)
endif
ifeq ($(strip $(ASSMSRC)),)
    ASSMSRC := $(wildcard *.S)
endif

ifneq (mcs51,$(TOOLCHAIN))
OBJC_LTO    := $(SRC:%.c=$(BINDIR)$(MODULE)/%.o)
 OBJC_NOLTO  := $(SRC_NOLTO:%.c=$(BINDIR)$(MODULE)/%.o)
OBJC        := $(OBJC_NOLTO) $(OBJC_LTO)
OBJCXX      := $(SRCXX:%.cpp=$(BINDIR)$(MODULE)/%.o)
ASMOBJ      := $(ASMSRC:%.s=$(BINDIR)$(MODULE)/%.o)
ASSMOBJ     := $(ASSMSRC:%.S=$(BINDIR)$(MODULE)/%.o)
else
ifeq ($(strip $(OBJL)),)
    SRCL := $(wildcard *.lib)
endif

OBJC_LTO    := $(SRC:%.c=$(BINDIR)$(MODULE)/%.rel)
OBJC_NOLTO  := $(SRC_NOLTO:%.c=$(BINDIR)$(MODULE)/%.rel)
OBJC        := $(OBJC_NOLTO) $(OBJC_LTO)
OBJLIB 		:= $(SRCL:%.rel=$(BINDIR)$(MODULE)/%.lib)

endif

ifneq (mcs51,$(TOOLCHAIN))
OBJ := $(OBJC) $(OBJCXX) $(ASMOBJ) $(ASSMOBJ)
DEP := $(OBJC:.o=.d) $(OBJCXX:.o=.d) $(ASSMOBJ:.o=.d)
else #8051/mcs51 specific architecture
OBJ := $(OBJC) $(ASMOBJ) $(ASSMOBJ)
DEP := $(OBJC:.o=.d) $(OBJCXX:.o=.d) $(ASSMOBJ:.o=.d)
OBJL := $(OBJLIB)
endif

$(BINDIR)$(MODULE)/:
	$(AD)mkdir -p $@

ifneq (mcs51,$(TOOLCHAIN))
$(BINDIR)$(MODULE).a $(OBJ): | $(BINDIR)$(MODULE)/

$(BINDIR)$(MODULE).a: $(OBJ) | ${DIRS:%=ALL--%}
	$(AD)$(AR) $(ARFLAGS) $@ $?

CXXFLAGS = $(filter-out $(CXXUWFLAGS), $(CFLAGS)) $(CXXEXFLAGS)
else #8051/mcs51 specific architecture
$(BINDIR)$(MODULE).rel $(OBJ): | $(BINDIR)$(MODULE)/

$(BINDIR)$(MODULE).rel: $(OBJ) | ${DIRS:%=ALL--%}
	$(AD)$(AR) $(ARFLAGS) $@ $?
endif

# compile and generate dependency info


ifneq (mcs51,$(TOOLCHAIN))
$(OBJC_LTO): CFLAGS+=$(LTOFLAGS)

$(OBJC): $(BINDIR)$(MODULE)/%.o: %.c $(RIOTBUILD_CONFIG_HEADER_C)
	$(AD)$(CCACHE) $(CC) \
		-DRIOT_FILE_RELATIVE=\"$(patsubst $(RIOTBASE)/%,%,$(abspath $<))\" \
		-DRIOT_FILE_NOPATH=\"$(notdir $<)\" \
		$(CFLAGS) $(INCLUDES) -MD -MP -c -o $@ $(abspath $<)

$(OBJCXX): $(BINDIR)$(MODULE)/%.o: %.cpp $(RIOTBUILD_CONFIG_HEADER_C)
	$(AD)$(CCACHE) $(CXX) \
		-DRIOT_FILE_RELATIVE=\"$(patsubst $(RIOTBASE)/%,%,$(abspath $<))\" \
		-DRIOT_FILE_NOPATH=\"$(notdir $<)\" \
		$(CXXFLAGS) $(INCLUDES) $(CXXINCLUDES) -MD -MP -c -o $@ $(abspath $<)

$(ASMOBJ): $(BINDIR)$(MODULE)/%.o: %.s
	$(AD)$(AS) $(ASFLAGS) -o $@ $(abspath $<)

$(ASSMOBJ): $(BINDIR)$(MODULE)/%.o: %.S
	$(AD)$(CC) $(CFLAGS) $(INCLUDES) -MD -MP -c -o $@ $(abspath $<)
else #8051/mcs51 specific architecture no .s or .S At this moment
$(OBJC_LTO): CFLAGS+=$(LTOFLAGS)
$(OBJC): $(BINDIR)$(MODULE)/%.rel: %.c $(RIOTBUILD_CONFIG_HEADER_C)
	$(AD)$(CCACHE) $(CC) -c $(abspath $<) \
		-DRIOT_FILE_RELATIVE=\"$(patsubst $(RIOTBASE)/%,%,$(abspath $<))\" \
		-DRIOT_FILE_NOPATH=\"$(notdir $<)\" \
		-Wp,-MMD,$(@:%.rel=%.d),-MT,$@,-MP $(INCLUDES)-Wa,-p --model-medium --debug -o $@

endif
# pull in dependency info for *existing* .o files
# deleted header files will be silently ignored
ifneq (mcs51,$(TOOLCHAIN))
-include $(DEP)
endif
